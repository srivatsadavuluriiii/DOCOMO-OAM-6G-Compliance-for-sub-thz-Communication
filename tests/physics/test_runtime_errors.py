#!/usr/bin/env python3
"""
Test script to verify no runtime errors in critical functions.
"""

import numpy as np
import os
import sys

# Use centralized path management instead of sys.path.append
from utils.path_utils import ensure_project_root_in_path
ensure_project_root_in_path()

from simulator.channel_simulator import ChannelSimulator

def test_critical_functions():
    """Test all critical functions for runtime errors."""
    
    print("üî¨ Testing Critical Functions for Runtime Errors...")
    print("=" * 55)
    
    # Create simulator
    config = {
        'system': {
            'frequency': 28.0e9,
            'bandwidth': 400e6,
            'tx_power_dBm': 30.0,
            'noise_figure_dB': 8.0,
            'noise_temp': 290.0
        },
        'environment': {
            'humidity': 50.0,
            'temperature': 20.0,
            'pressure': 101.3,
            'turbulence_strength': 1e-14,
            'pointing_error_std': 0.005,
            'rician_k_factor': 8.0
        },
        'oam': {
            'min_mode': 1,
            'max_mode': 6,
            'beam_width': 0.03
        }
    }
    
    simulator = ChannelSimulator(config)
    
    # Test parameters
    distance = 1000.0  # 1 km
    user_position = np.array([1000.0, 0.0, 0.0])  # 1 km away
    current_oam_mode = 1
    
    try:
        print("‚úÖ Testing _calculate_path_loss...")
        path_loss = simulator._calculate_path_loss(distance)
        print(f"   ‚Ä¢ Path loss: {path_loss:.2e}")
        
        print("‚úÖ Testing _calculate_atmospheric_absorption...")
        atmospheric_loss = simulator._calculate_atmospheric_absorption(distance)
        print(f"   ‚Ä¢ Atmospheric loss: {atmospheric_loss:.2e}")
        
        print("‚úÖ Testing _calculate_noise_power...")
        noise_power = simulator._calculate_noise_power()
        print(f"   ‚Ä¢ Noise power: {noise_power:.2e} W")
        
        print("‚úÖ Testing _get_pointing_error_loss...")
        pointing_loss = simulator._get_pointing_error_loss(current_oam_mode)
        print(f"   ‚Ä¢ Pointing loss: {pointing_loss:.4f}")
        
        print("‚úÖ Testing _get_rician_fading_gain...")
        fading_matrix = simulator._get_rician_fading_gain()
        print(f"   ‚Ä¢ Fading matrix shape: {fading_matrix.shape}")
        
        print("‚úÖ Testing _generate_turbulence_screen...")
        turbulence_screen = simulator._generate_turbulence_screen(distance)
        print(f"   ‚Ä¢ Turbulence screen shape: {turbulence_screen.shape}")
        
        print("‚úÖ Testing _calculate_crosstalk...")
        crosstalk_matrix = simulator._calculate_crosstalk(distance, turbulence_screen)
        print(f"   ‚Ä¢ Crosstalk matrix shape: {crosstalk_matrix.shape}")
        
        print("‚úÖ Testing run_step (main simulation function)...")
        H, sinr_dB = simulator.run_step(user_position, current_oam_mode)
        print(f"   ‚Ä¢ Channel matrix shape: {H.shape}")
        print(f"   ‚Ä¢ SINR: {sinr_dB:.2f} dB")
        
        print("\nüéâ ALL CRITICAL FUNCTIONS WORKING CORRECTLY!")
        print("‚úÖ No runtime errors detected")
        print("‚úÖ All functions return proper values")
        print("‚úÖ No undefined variables")
        print("‚úÖ No missing return statements")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå RUNTIME ERROR DETECTED: {e}")
        print(f"   ‚Ä¢ Error type: {type(e).__name__}")
        print(f"   ‚Ä¢ Error location: {e.__traceback__.tb_frame.f_code.co_name}")
        return False

def test_edge_cases():
    """Test edge cases that might cause runtime errors."""
    
    print("\nüî¨ Testing Edge Cases...")
    print("=" * 30)
    
    config = {
        'system': {'frequency': 28.0e9},
        'environment': {'humidity': 50.0, 'temperature': 20.0, 'pressure': 101.3},
        'oam': {'min_mode': 1, 'max_mode': 6}
    }
    
    simulator = ChannelSimulator(config)
    
    try:
        # Test very small distance
        print("‚úÖ Testing minimum distance (1m)...")
        path_loss_min = simulator._calculate_path_loss(1.0)
        print(f"   ‚Ä¢ Path loss at 1m: {path_loss_min:.2e}")
        
        # Test very large distance
        print("‚úÖ Testing maximum distance (50km)...")
        path_loss_max = simulator._calculate_path_loss(50000.0)
        print(f"   ‚Ä¢ Path loss at 50km: {path_loss_max:.2e}")
        
        # Test zero humidity
        print("‚úÖ Testing zero humidity...")
        simulator.humidity = 0.0
        atmospheric_loss_zero = simulator._calculate_atmospheric_absorption(1000.0)
        print(f"   ‚Ä¢ Atmospheric loss (0% humidity): {atmospheric_loss_zero:.2e}")
        
        # Test high humidity
        print("‚úÖ Testing high humidity (100%)...")
        simulator.humidity = 100.0
        atmospheric_loss_high = simulator._calculate_atmospheric_absorption(1000.0)
        print(f"   ‚Ä¢ Atmospheric loss (100% humidity): {atmospheric_loss_high:.2e}")
        
        print("\nüéâ ALL EDGE CASES HANDLED CORRECTLY!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå EDGE CASE ERROR: {e}")
        return False

if __name__ == "__main__":
    success1 = test_critical_functions()
    success2 = test_edge_cases()
    
    if success1 and success2:
        print("\nüéâ ALL TESTS PASSED - NO RUNTIME ERRORS!")
    else:
        print("\n‚ùå RUNTIME ERRORS DETECTED!")
        sys.exit(1) 